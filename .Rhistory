fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
fit
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .37;
cor = .25;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 100
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[3,5] < .05) {
success[i] = TRUE
}
}
fit
fit$ANOVA
fit$ANOVA[1,5]
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .37;
cor = .25;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 100
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 150
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
250 / 2
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
browseURL("http://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/")
rm(list=ls())
require(MASS)
x <- c(110, 100, 102, 95, 99, 100, 98, 90, 109, 105, 108, 102, 100, 100, 103, 101, 104, 106, 101, 97)   ## IQ values
hist(x, breaks = 6, xlab = "IQ")
hist(x, xlab = "IQ")
hist(x, breaks = 10, xlab = "IQ")
mean(x)      ## sample mean
sd(x)        ## sample sd
fitnorm <- fitdistr(x, densfun = "normal")  ## it actually uses ML-estimation
fitnorm                                     ## note that it is not exactly the same as sd(x) (1/n vs. 1/(n-1))
hist(x, freq = FALSE, xlab = "IQ", ylim = c(0, 0.1), xlim = c(85, 115), main = "IQ Histogram")
xnorm <- sort(rnorm(500, fitnorm$estimate[1], fitnorm$estimate[2]))
lines(xnorm, dnorm(xnorm, fitnorm$estimate[1], fitnorm$estimate[2]))
## let's just fix sigma and explore the likelihood for various values of mu
sigma <- fitnorm$estimate[2]
sigma
muvec <- seq(90, 110, 0.01)
muvec
## we should get the same value as in fitdistr
likvec <- sapply(muvec, function(mu) {
sum(dnorm(x, mu, sd = sigma, log = TRUE))   ## sum of log-density values
})
likvec     ## these are the log-likelihood values given (!!) the parameter mu
ind <- which(likvec == max(likvec))    ## pull out the largest one
muvec[ind]   ## check: same as above
## likelihood representation
plot(muvec, likvec, type = "l", main = "Log-Likelihood", xlab = expression(mu), ylab = "Log-likelihood value")
abline(v = muvec[ind], col = "gray", lty = 2, lwd = 2)
if (!require("BSDA")) {install.packages("BSDA"); require("BSDA")}   ## computes a z-test
if (!require("animation")) {install.packages("animation"); require("animation")}   ## CI animation
if (!require("devtools")) {install.packages("devtools"); require("devtools")}   ## supports installing from github
if (!require("BayesianFirstAid")) {install_github("rasmusab/bayesian_first_aid"); require("BayesianFirstAid")}  ## Bayes package to play with
if (!require("coda")) {install.packages("coda"); require("coda")}
if (!require("effsize")) {install.packages("effsize"); require("effsize")}    ## effect size
if (!require("PairedData")) {install.packages("PairedData"); require("PairedData")}  ## paired datasets
theta <- seq(0, 1, 0.1)
therta
theta
prior <- pmin(theta, 1-theta)/sum(pmin(theta, 1-theta))
prior
op <- par(mfrow = c(3,1))
plot(theta, prior, type = "h", xlab = expression(theta), ylab = expression(paste("p(", theta, ")")), main = "Prior")
lik <- theta               ## due to Bernoulli (z = 1, N = 1)
plot(theta, lik, type = "h", xlab = expression(theta), ylab = expression(paste("p(D|", theta,")")), main = "Likelihood (z = 1, n = 1)")
p_D <- sum(lik*prior)      ## evidence
post <- lik*prior/p_D      ## Bayes theorem
plot(theta, post, type = "h", xlab = expression(theta), ylab = expression(paste("p(", theta,"|D)")), main = "Posterior")
par(op)
theta <- seq(0, 1, 0.01)               ## possible parameter values
theta
prior <- dbeta(theta, 11, 11)          ## beta (11,11) density (alpha = 11, beta = 11)
p_DTheta <- theta^8*(1-theta)^18       ## likelihood z = 8 heads, N - z = 18 tails
p_DTheta
p_ThetaD <- dbeta(theta, 19, 29)       ## 8+11, 26-8+11
x11()
op <- par(mfrow = c(3,1))
plot(theta, prior, type = "l", xlab = expression(theta), ylab = expression(paste("d(",theta,")")), main = "Prior")
plot(theta, p_DTheta, type = "l", xlim = c(0,1), main = "Likelihood", xlab = expression(theta), ylab = expression(paste("p(D|", theta, ")")))
plot(theta, p_ThetaD, type = "l", xlim = c(0,1), main = "Posterior", xlab = expression(theta), ylab = expression(paste("p(", theta, "|D)")))
abline(v = c(0.261, 0.533), lty = 2, col = "gray")
arrows(0.261, 0.8, 0.533, 0.8, length = 0.05, code = 3, col = "darkgray")
text(0.4, 1.5, "95% HPD", cex = 0.9, col = "darkgray")
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
abline(h = 50, col = "red", lty = 2)
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
par(op)
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
par(mfrow = c(1))
par(mfrow = c(1,1))
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
abline(h = 50, col = "red", lty = 2)
legend("topleft", legend = c("correct", "incorrect"), pch = 22, pt.bg = c("black","gray"))
binom.test(60, n = 100)      ## frequentist version
## We can not reject H0.
## Bayesian version
set.seed(123)       ## we fix this since there is some simulation going on here (MCMC)
?bayes.binom.test   ## it uses a beta(1,1) prior (uninformative).
x <- seq(-0.5, 1.5, 0.001)    ## just for plotting the prior
plot(x, dbeta(x, 1, 1), type = "l", xlim = c(-0.5, 1.5), xlab = "p", ylab = "density", main = "Beta(1,1) Prior")
set.seed(123)
res.bin <- bayes.binom.test(60, 100)   ## Bayesian binomial test
res.bin
install_github("rasmusab/bayesian_first_aid");
require(rjags)
require(rjags)
.Platform$pkgType
load(rjags)
library(rjags)
rsq <- ss.reg / (ss.reg + ss.res)
library(foreign)
texas <- as.data.frame(read.spss("http://mprlab327.webfactional.com/amorris/stats/M142.sav"))
colnames(texas)
# ----- Problem 3 -----
ss.reg <- 59.69
ss.res <- 344.25
+
+
rsq <- ss.reg / (ss.reg + ss.res)
-.035 ^ 2
-.035 ^ 2
-1 ^ 2
(-1) ^ 2
(-.035) ^ 2
c(.179, .178, -.029, .121, .0884, -.0347, .105) ^ 2
rsq <- ss.reg / (ss.reg + ss.res)
N <- 361
J <- 7
ss.reg <- 59.69
ss.res <- 344.25
ms.reg <- ss.reg / J
ms.res <- ss.res / (N - J - 1)
f.stat <- ms.reg / ms.res
pf(f.stat, J, N - J - 1, lower.tail = F)
rsq.adj <- 1 - (1 - rsq) * (N - 1) / (N - J - 1)
see <- sqrt(ss.res / N)
var.res <- ss.res / (N - J - 1)
.0884 ^ 2
b <- .143 * 1.618 / 1.059
t.stat <- b / .038
?pt
2 * pt(t.stat, N - J - 1)
pt(t.stat, N - J - 1)
2 * pt(t.stat, N - J - 1, lower.tail = F)
.114 ^ 2
.073 ^ 2
.073 ^ 2 * N / (N - 1)
.073 ^ 2 * (N - 1) / N
t.stat <- b / se.b
b <- .115 * .114 / 1.059
# We need to calculate the standard error of the unstandarized coefficient by:
# std-error-b <- sqrt(std-error-estimate ^ 2 / (ss-SDO * (1 - coef-of-multicollinearity)))
se.estimate <- sqrt(ss.res / N)
# to get the ss-SDO, we square the standard deviation of SDO (to get variance)
# and then multiply by N. (We're assuming that SPSS isn't reporting the
# unbiased estimate of population standard deviation.)
ss.sdo <- (.114 ^ 2) * N
# note that (1 - coef-of-multicollinearity(sdo)) = tolerance(sdo),
# which is given
tol.sdo <- .843
# so:
se.b <- sqrt((se.estimate ^ 2) / (ss.sdo * tol.sdo))
t.stat <- b / se.b
2 * pt(t.stat, N - J - 1, lower.tail = F)
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2)
cor.aa.ed <- .091
cor.aa.sdo <- .173
cor.ed.sdo <- -.228
# That semi-partial correlation is a measure of the relationship between
# affirmative action opposition and education, controlling for the
# effect of SDO on education.
# It is calculated by:
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
require(MASS)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
require(ez)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
200 * .7
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 140
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
c(.235, .268, -.041, .091, .138, .077, .173) ^ 2
rm(list=ls())
N <- 361 # sample size
J <- 7 # number of predictors
ss.reg <- 59.69 # sum of squares of regression model
ss.res <- 344.25 # sum of squares of residuals
ms.reg <- ss.reg / J # mean-square regression
ms.res <- ss.res / (N - J - 1) # mean-square residuals
## 3a.
# What % of the variation in opposition to affirmative action can be explained
# by the other variables?
# The % of variance explained by all of them is R-squared, which is
# SS-reg / (SS-reg + SS-res), or...
rsq <- ss.reg / (ss.reg + ss.res) # .15
# The % of variance that can be explained by each predictor (NOT controlling
# for other variables) is the square of the zero-order correlations, or...
c(.235, .268, -.041, .091, .138, .077, .173) ^ 2
# in the order on the homework:
# .055 .072 .0017 .0083 .019 .0059 .030
# The % of variance that can be explained by each predictor (controlling for the
# effects of the other predictors on this predictor) is the square of the semi-partial correlation
# between opposition to affirmative action and the predictor (available in the output), or..
c(.179, .178, -.029, .121, .0884, -.0347, .105) ^ 2
# in the order on the homework:
# .032 .032 .00084 .015 .0078 .0012 .011
f.stat <- ms.reg / ms.res
# and get the p value by using the F distribution function...
pf(f.stat, J, N - J - 1, lower.tail = F)
rsq.adj <- 1 - (1 - rsq) * (N - 1) / (N - J - 1) # .13
var.res <- ss.res / (N - J - 1) # .98
.0884 ^ 2 # .0078
b.educ <- .143 * 1.059 / 1.618
# then, calculate a t statistic by t(N - J - 1) = b / std-error(b), pulling std-error(b) from the
# output, or...
t.stat.educ <- b.educ / .038
# finally, get the (2-tailed) p value by looking up this value in the t distribution
2 * pt(t.stat.educ, N - J - 1, lower.tail = FALSE) # .014
# p < .05; opposition to affirmative action can be predicted by education at an above-chance level
## 3g.
# Same explanation as above.
b.sdo <- .115 * 1.059 / .114
# As it's not in the output, this time we need to calculate the standard error of the unstandarized
# coefficient by:
# std-error-b <- sqrt(std-error-estimate ^ 2 / (ss-SDO * (1 - coef-of-multicollinearity)))
se.estimate.sdo <- sqrt(ss.res / N) # .98
se.estimate.sdo <- sqrt(ss.res / N) # .98
# to get the ss-SDO, we square the standard deviation of SDO (to get variance)
# and then multiply by N. (We're assuming that SPSS isn't reporting the
# unbiased estimate of population standard deviation.)
ss.sdo <- (.114 ^ 2) * N
# note that (1 - coef-of-multicollinearity(sdo)) = tolerance(sdo),
# which is given
tol.sdo <- .843
# so:
se.b.sdo <- sqrt((se.estimate.sdo ^ 2) / (ss.sdo * tol.sdo)) # .49
t.stat.sdo <- b.sdo / se.b.sdo # 2.18
2 * pt(t.stat.sdo, N - J - 1, lower.tail = FALSE) # .030
# p < .05; opposition to affirmative action can be predicted by SDO at an above-chance level
## 3h.
cor.aa.ed <- .091
cor.aa.sdo <- .173
cor.ed.sdo <- -.228
# This semi-partial correlation is a measure of the relationship between affirmative action
# opposition and education, controlling for the effect of SDO on education. It is calculated by:
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2) # .13
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 140
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
install.packages("BiasedUrn")
real <- T
stem = 'Behavioral/1b_fix/v3/real/'
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
## Bonuses
write.table(df.demo %>% select(WorkerID = subject, Bonus = bonus),
paste0(stem, 'Bonus.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
real <- T
stem = 'Behavioral/1b_fix/v3/real/'
if (real) {
df <- read.csv(paste0(stem, 'data.csv')) %>% tbl_df
df.demo <- read.csv(paste0(stem, 'demo.csv'))
} else {
df <- read.csv('Simulations/data/1b_fix_extreme/sims_MB_MB.csv') %>% tbl_df
}
df <- df %>% arrange(subject)
df$subject <- trimws(as.character(df$subject))
df$subject <- ifelse(regexpr('\n', df$subject) > -1, substr(df$subject, 1, regexpr('\n', df$subject) - 1), df$subject)
df.demo$subject <- trimws(as.character(df.demo$subject))
df.demo$subject <- ifelse(regexpr('\n', df.demo$subject) > -1, substr(df.demo$subject, 1, regexpr('\n', df.demo$subject) - 1), df.demo$subject)
setwd("~/Me/Psychology/Projects/Dezfouli/git")
real <- T
stem = 'Behavioral/1b_fix/v3/real/'
if (real) {
df <- read.csv(paste0(stem, 'data.csv')) %>% tbl_df
df.demo <- read.csv(paste0(stem, 'demo.csv'))
} else {
df <- read.csv('Simulations/data/1b_fix_extreme/sims_MB_MB.csv') %>% tbl_df
}
df <- df %>% arrange(subject)
df$subject <- trimws(as.character(df$subject))
df$subject <- ifelse(regexpr('\n', df$subject) > -1, substr(df$subject, 1, regexpr('\n', df$subject) - 1), df$subject)
df.demo$subject <- trimws(as.character(df.demo$subject))
df.demo$subject <- ifelse(regexpr('\n', df.demo$subject) > -1, substr(df.demo$subject, 1, regexpr('\n', df.demo$subject) - 1), df.demo$subject)
write.table(df.demo %>% select(WorkerID = subject, Bonus = bonus),
paste0(stem, 'Bonus.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
View(df.demo)
real <- T
stem = 'Behavioral/1b_fix/v3/real/'
if (real) {
df <- read.csv(paste0(stem, 'data.csv')) %>% tbl_df
df.demo <- read.csv(paste0(stem, 'demo.csv'))
} else {
df <- read.csv('Simulations/data/1b_fix_extreme/sims_MB_MB.csv') %>% tbl_df
}
df <- df %>% arrange(subject)
df$subject <- trimws(as.character(df$subject))
df$subject <- ifelse(regexpr('\n', df$subject) > -1, substr(df$subject, 1, regexpr('\n', df$subject) - 1), df$subject)
df.demo$subject <- trimws(as.character(df.demo$subject))
df.demo$subject <- ifelse(regexpr('\n', df.demo$subject) > -1, substr(df.demo$subject, 1, regexpr('\n', df.demo$subject) - 1), df.demo$subject)
write.table(df.demo %>% select(WorkerID = subject, Bonus = bonus),
paste0(stem, 'Bonus.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
